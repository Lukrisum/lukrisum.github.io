{"posts":[{"title":"Hello World","text":"","link":"/2022/12/04/hello-world/"},{"title":"Write Me A Koa","text":"前两天有空，跟着B站上的视频，实现了一个简易的 koa 框架（不包括 koa-router） 手写过程 手写源码前我们看看用到了哪些API，这些就是我们手写的目标。 ——DennisJiang 为方便了解 koa 的 API，这是一个 Hello World 的例子，随便请求一个路径（3000端口）都返回 Hello World 以及一个 logger ，就是记录下处理当前请求花了多长时间，并附带错误处理的用例 1234567891011121314151617181920212223242526const Koa = require(&quot;koa&quot;)const app = new Koa()// usage of middlewareapp.use(async (ctx, next) =&gt; { const start = Date.now(); await next(); const ms = Date.now() - start; console.log(`${ctx.method} ${ctx.url} - ${ms}ms`);});app.use(async (ctx, next) =&gt; { // use cases for ctx ctx.body = &quot;Hello World&quot;;});// koa's error handlingapp.on('error',(e)=&gt;{ console.log(e)})// listen on port 3000app.listen(3000, () =&gt; { console.log(`Server is running on http://127.0.0.1:${port}/`);}); 参考源码，分为以下文件，分别实现： application.js ：require('koa') 引入的 koa 类 context.js：ctx 对象 request.js：ctx.request 对象 response.js：ctx.response 对象 package.json：配置入口文件等 配置入口文件为 application.js：1234// package.json{ &quot;main&quot;:&quot;./application.js&quot;} 实现 app.use()，app.listen()，app.on() 等123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475// application.jsconst http = require('http')const context = require('./context')const request = require('./request')const response = require('./response')const EventEmmiter = require('events')class Application extends EventEmmiter { constructor() { super() this.context = Object.create(context) this.request = Object.create(request) this.response = Object.create(response) this.middlewares = [] } use(middleware) { this.middlewares.push(middleware) } createContext(req, res) { const ctx = Object.create(this.context) const request = Object.create(this.request) const response = Object.create(this.response) ctx.request = request ctx.request.req = ctx.req = req ctx.response = response ctx.response.res = ctx.res = res return ctx } compose(ctx) { let index = -1 const dispatch = (i) =&gt; { if (index &gt;= i) { return Promise.reject('next() called multiple times') } index = i if (this.middlewares.length == i) return Promise.resolve() let middleware = this.middlewares[i] try { return Promise.resolve(middleware(ctx, () =&gt; dispatch(i + 1))) } catch (e) { return Promise.reject(e) } } return dispatch(0) } handleRequest = (req, res) =&gt; { let ctx = this.createContext(req, res) res.statusCode = 404 this.compose(ctx).then(() =&gt; { const body = ctx.body if (body) { res.end(body) } else { res.end('NOT FOUND') } }).catch((e) =&gt; { this.emit('error', e) }) } listen() { let server = http.createServer(this.handleRequest) server.listen(...arguments) }}module.exports = Application ctx.request 对象的封装123456789101112131415161718// request.jsconst url = require('url')const request = { get url() { return this.req.url }, get path() { let { pathname } = url.parse(this.req.url) return pathname }, get query() { let { query } = url.parse(this.req.url, true) return query }}module.exports = request ctx.response 对象的封装12345678910111213// response.jsconst response = { _body: undefined, get body() { return this._body }, set body(content) { this.res.statusCode = 200 this._body = content }}module.exports = response ctx 对象的封装（同时将 request，response 对象挂载上去）12345678910111213141516171819202122232425// context.jsconst context = {}function defineGetter(target, key) { context.__defineGetter__(key, function () { return this[target][key] })}function defineSetter(target, key) { context.__defineSetter__(key, function (value) { this[target][key] = value })}defineGetter('request', 'path')defineGetter('request', 'url')defineGetter('request', 'query')defineGetter('response', 'body')defineSetter('response', 'body')module.exports = context 总结koa 的核心功能 提供了功能丰富的 ctx（即 koa 文档说的“上下文”） 特有的中间件流程（洋葱模型） 更好的错误处理 第一次尝试实现一个库/框架，虽然借助了视频，过程也比较磕磕绊绊，但是现在再去看 koa 官方文档中的介绍，就会有一种恍然大悟的感觉，这也许就是所谓“阅读源码”的好处 相关链接 手写 Koa 源码：http://dennisgo.cn/Articles/Node/Koa.htmlB 站视频：https://www.bilibili.com/video/BV19M4y1G71B/?spm_id_from=333.337.search-card.all.click&amp;vd_source=8583748192f1bc61f6d8bf9d41576b98","link":"/2022/12/05/write-me-a-koa/"}],"tags":[{"name":"source code","slug":"source-code","link":"/tags/source-code/"}],"categories":[{"name":"Tech","slug":"Tech","link":"/categories/Tech/"},{"name":"FrontEnd","slug":"Tech/FrontEnd","link":"/categories/Tech/FrontEnd/"},{"name":"Node.js","slug":"Tech/FrontEnd/Node-js","link":"/categories/Tech/FrontEnd/Node-js/"}],"pages":[{"title":"about","text":"Hi there 👋 I am Lukrisum.","link":"/about/index.html"}]}